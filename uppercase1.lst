     1                                  ; Executable name : uppercase1
     2                                  ; Version : 1.0
     3                                  ; Created date : December 15, 2020
     4                                  ; Updated date : December 16, 2020
     5                                  ; Author : Olga Agafonova
     6                                  ; Description : An exercise from the "Assembly Language Step-by-Step" book
     7                                  ;
     8                                  ; Build using these commands or use the makefile:
     9                                  ; nasm -f elf -g -F stabs uppercase1.asm
    10                                  ; ld -o uppercase1 uppercase1.o
    11                                  ;
    12                                  ;
    13                                  ; Run using ./uppercase1 - enter a lowercase word and watch it turn into uppercase...
    14                                  
    15                                  section .bss
    16                                      BUFFLEN equ 1024;       ; length of the buffer
    17 00000000 <res 400h>                  Buff: resb BUFFLEN      ; the buffer itself containing text
    18                                  
    19                                  section .data
    20                                  
    21                                  section .text
    22                                  
    23                                  global _start
    24                                  
    25                                  _start:
    26                                  
    27 00000000 90                      nop                          ; keeps the debugger happy
    28                                  
    29                                                               ; Read a buffer full of text from stdin
    30 00000001 B803000000              Read:   mov eax, 3           ; Specify sys_read call
    31 00000006 BB00000000                      mov ebx, 0           ; Specify file descriptor 0 - standard input
    32                                          
    33                                                               ; Setup registers to read from the buffer
    34 0000000B B9[00000000]                    mov ecx, Buff        ; Pass address of the buffer to read to
    35 00000010 BA00040000                      mov edx, BUFFLEN     ; Tell sys_read to read one char from input
    36 00000015 CD80                            int 80h              ; Call sys_read
    37 00000017 89C6                            mov esi, eax         ; Copy sys_read return value for the future
    38 00000019 83F800                          cmp eax, 0           ; If eax=0, sys_read reached EOF in stdin
    39 0000001C 7433                            je Done
    40                                          
    41                                                               ; Setup registers for the buffer loop
    42 0000001E 89F1                            mov ecx, esi         ; Place the number of bytes read into ecx
    43 00000020 BD[00000000]                    mov ebp, Buff        ; Place address of buffer into ebp
    44 00000025 4D                              dec ebp              ; Adjust count to offset
    45                                  
    46 00000026 807C0D0061              Scan:   cmp byte [ebp+ecx], 61h ; Test input character against lowercase 'a'
    47 0000002B 720C                            jb Next                 ; If below 'a' in ASCII, not lowercase
    48 0000002D 807C0D007A                      cmp byte [ebp+ecx], 7Ah ; Test input character against lowercase 'z'
    49 00000032 7705                            ja Next                 ; If above 'z' in ASCII, not lowercase
    50                                                                  ; Now, we have a lowercase character...
    51 00000034 806C0D0020                      sub byte [ebp+ecx], 20h ; Subtract 20h from lowercase char to get an uppercase char
    52                                          
    53 00000039 49                      Next:   dec ecx              ; Decrement counter
    54 0000003A 75EA                            jnz Scan             ; If there are more characters in buffer, loop back
    55                                          
    56                                                               ; Write the char to standard output 
    57 0000003C B804000000              Write:  mov eax, 4           ; Specify sys_write call
    58 00000041 BB01000000                      mov ebx, 1           ; Specify file descriptor 1 - standard output
    59 00000046 B9[00000000]                    mov ecx, Buff        ; Pass address of the buffer to write
    60 0000004B 89F2                            mov edx, esi         ; Pass the # of bytes of data in the buffer
    61 0000004D CD80                            int 80h              ; Call sys_read
    62 0000004F EBB0                            jmp Read             ; Go read another character
    63                                          
    64 00000051 B801000000              Done:   mov eax, 1           ; Load code for exit syscall
    65 00000056 BB00000000                      mov ebx, 0           ; Return a code of zero to Linux
    66 0000005B CD80                            int 80h              ; Make a kernel call to exit the program
    67                                  
    68                                  
    69                                  
